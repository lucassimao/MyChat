import AppBar from '@material-ui/core/AppBar';
import { makeStyles } from '@material-ui/core/styles';
import React, { useState, useRef, useEffect } from 'react';
import ChatRoomToolbar from './ChatRoomToolbar';

import Toolbar from '@material-ui/core/Toolbar';
import IconButton from '@material-ui/core/IconButton';
import Telegram from '@material-ui/icons/Telegram';
import InputBase from '@material-ui/core/InputBase';
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';
import ListItemAvatar from '@material-ui/core/ListItemAvatar';
import ListItemText from '@material-ui/core/ListItemText';
import Avatar from '@material-ui/core/Avatar';
import { red } from '@material-ui/core/colors';
import { Grid } from '@material-ui/core';
import {
  useParams
} from "react-router-dom";
import Divider from '@material-ui/core/Divider';




const initialMessages = [
    {
        id: 1,
        primary: 'Brunch this week?',
        secondary: "I'll be in the neighbourhood this week. Let's grab a bite to eat",
        person: '/static/images/avatar/5.jpg',
    },
    {
        id: 2,
        primary: 'Birthday Gift',
        secondary: `Do you have a suggestion for a good present for John on his work
      anniversary. I am really confused & would love your thoughts on it.`,
        person: '/static/images/avatar/1.jpg',
    },
    {
        id: 3,
        primary: 'Recipe to try',
        secondary: 'I am try out this new BBQ recipe, I think this might be amazing',
        person: '/static/images/avatar/2.jpg',
    },
    {
        id: 4,
        primary: 'Yes!',
        secondary: 'I have the tickets to the ReactConf for this year.',
        person: '/static/images/avatar/3.jpg',
    },
    {
        id: 5,
        primary: "Doctor's Appointment",
        secondary: 'My appointment for the doctor was rescheduled for next Saturday.',
        person: '/static/images/avatar/4.jpg',
    },
    {
        id: 6,
        primary: 'Discussion',
        secondary: `Menus that are generated by the bottom app bar (such as a bottom
      navigation drawer or overflow menu) open as bottom sheets at a higher elevation
      than the bar.`,
        person: '/static/images/avatar/5.jpg',
    },
    {
        id: 7,
        primary: 'Summer BBQ',
        secondary: `Who wants to have a cookout this weekend? I just got some furniture
      for my backyard and would love to fire up the grill.`,
        person: '/static/images/avatar/1.jpg',
    },
];

const useStyles = makeStyles(theme => ({
    root: {
        display: 'flex',
        flexDirection: 'column',
        height: '100%',
    },
    input: {
        flexGrow: 1
    },
    messagesList: {
        overflowY: 'auto',
        maxWidth: '100%',
        overflowX: 'hidden',
        wordBreak: 'break-word'
    },
    onlineUsersList: {
        overflowY: 'auto',
        overflowX: 'hidden',
    },
    grid: {
        overflow: 'hidden',
    },
    avatar: {
        backgroundColor: red[500],
    },
}));

const OnlineUsers = React.forwardRef((props, ref) => {
    const { classes } = props;

    return (<List ref={ref} className={classes.onlineUsersList}>
        {[...Array(20).keys()].map((_, idx) => <React.Fragment key={idx}>
            <ListItem button alignItems="center" >
                <ListItemAvatar>
                    <Avatar className={classes.avatar} />
                </ListItemAvatar>
                <ListItemText primary={`User ${idx}`} />
            </ListItem>
            {(idx < 19) && <Divider variant="inset" component="li" />}
        </React.Fragment>
        )}
    </List>);
});


export default function ChatRoom(props) {
    const classes = useStyles();
    const [message, setMessage] = useState('');
    const [messages, setMessages] = useState(initialMessages);
    const topBarRef = useRef();
    const bottomBarRef = useRef();
    const msgListRef = useRef();
    const onlineUsersListRef = useRef();
    const {roomId} = useParams();


    const handleUserTyping = (evt) => setMessage(evt.target.value);

    const sendMessage = () => {
        const newMsg = { id: messages.length + 1, secondary: message };
        setMessages([...messages, newMsg])
        setMessage('');
    }

    const onInputKeyDown = (evt) => {
        if (evt.keyCode === 13) {
            sendMessage();
            evt.preventDefault();
        }
    }

    useEffect(() => {
        msgListRef.current.lastChild.scrollIntoView(false)
    }, [messages])

    useEffect(() => {

        const intViewportHeight = window.innerHeight;
        const topBarHeight = topBarRef.current.offsetHeight;
        const bottomBarHeight = bottomBarRef.current.offsetHeight;
        const gridHeight = intViewportHeight - topBarHeight - bottomBarHeight;

        msgListRef.current.style.height = `${gridHeight}px`;
        onlineUsersListRef.current.style.height = `${gridHeight}px`;
    }, [])

    return (
        <div className={classes.root}>
            <AppBar ref={topBarRef} position="static">
                <ChatRoomToolbar />
            </AppBar>

            <Grid container className={classes.grid}>
                {/* List of online users */}
                <Grid display={{ xs: 'none', sm: 'block' }} item sm={4} md={3} lg={2}>
                    <OnlineUsers ref={onlineUsersListRef} classes={classes} />
                </Grid>


                {/* List of messages */}

                <Grid item xs={12} sm={8} md={9} lg={10}>
                    <List className={classes.messagesList} ref={msgListRef} >
                        {messages.map(({ id, primary, secondary, person }) => (
                            <ListItem button key={id}>
                                <ListItemAvatar>
                                    <Avatar alt="Profile Picture" className={classes.avatar} />
                                </ListItemAvatar>
                                <ListItemText secondary={secondary} />
                            </ListItem>
                        ))}
                    </List>
                </Grid>
            </Grid>

            <AppBar ref={bottomBarRef} position="static" color="inherit" className={classes.bottomBar} >
                <Toolbar>
                    <InputBase
                        className={classes.input}
                        multiline
                        autoFocus
                        rowsMax="4"
                        value={message}
                        onKeyDown={onInputKeyDown}
                        onChange={handleUserTyping}
                        placeholder="Type a message" />

                    <IconButton onClick={sendMessage} color="primary">
                        <Telegram />
                    </IconButton>
                </Toolbar>
            </AppBar>

        </div>
    );
}